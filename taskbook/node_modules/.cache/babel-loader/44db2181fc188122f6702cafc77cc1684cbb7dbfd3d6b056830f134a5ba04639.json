{"ast":null,"code":"var _jsxFileName = \"/home/edelta-002/Desktop/JS 77/To-Do List with React/taskbook/src/components/InputTask.jsx\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction InputTask({\n  refreshList\n}) {\n  const addTask = () => {\n    const val = document.getElementById(\"text-in\").value;\n    if (val === \"\") {\n      alert(\"Text field can't be empty.Please enter task.\");\n    } else {\n      const completed_task = false;\n      const date = new Date();\n      let hrs = date.getHours(),\n        mins = date.getMinutes(),\n        sec = date.getSeconds();\n      mins < 10 ? mins = \":0\" + mins : mins = \":\" + mins;\n      sec < 10 ? sec = \":0\" + sec : sec = \":\" + sec;\n      const task_id = date.toLocaleDateString() + \"  \" + hrs + mins + sec;\n      const Task = {\n        content: val,\n        completed: completed_task,\n        addedTime: task_id\n      };\n      localStorage.setItem(task_id, JSON.stringify(Task));\n      refreshList();\n      document.getElementById(\"text-in\").value = \"\";\n    }\n  };\n  const deleteAllTask = () => {\n    localStorage.clear();\n    refreshList();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Write Task here : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"text-in\",\n        cols: 40,\n        rows: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTask,\n        id: \"add-btn\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteAllTask,\n        id: \"delAll-btn\",\n        children: \"Delete All Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = InputTask;\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 1rem;\n  #text-in {\n    border-radius: 0.7rem;\n    font-size: 1.2rem;\n    border: 3px solid black;\n    margin: 1rem;\n  }\n  #add-btn,\n  #delAll-btn {\n    width: 10rem;\n    height: 3rem;\n    background-color: cadetblue;\n    color: rgb(13, 6, 63);\n    margin: 1rem;\n    padding: 0.5rem;\n    border: none;\n    border-radius: 0.5rem;\n    font-size: 1.2rem;\n  }\n`;\n_c2 = Container;\nexport default InputTask;\nvar _c, _c2;\n$RefreshReg$(_c, \"InputTask\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"names":["React","useState","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","InputTask","refreshList","addTask","val","document","getElementById","value","alert","completed_task","date","Date","hrs","getHours","mins","getMinutes","sec","getSeconds","task_id","toLocaleDateString","Task","content","completed","addedTime","localStorage","setItem","JSON","stringify","deleteAllTask","clear","children","Container","fileName","_jsxFileName","lineNumber","columnNumber","id","cols","rows","onClick","_c","div","_c2","$RefreshReg$"],"sources":["/home/edelta-002/Desktop/JS 77/To-Do List with React/taskbook/src/components/InputTask.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nfunction InputTask({ refreshList }) {\n  const addTask = () => {\n    const val = document.getElementById(\"text-in\").value;\n\n    if (val === \"\") {\n      alert(\"Text field can't be empty.Please enter task.\");\n    } else {\n      const completed_task = false;\n      const date = new Date();\n      let hrs = date.getHours(),\n        mins = date.getMinutes(),\n        sec = date.getSeconds();\n\n      mins < 10 ? (mins = \":0\" + mins) : (mins = \":\" + mins);\n      sec < 10 ? (sec = \":0\" + sec) : (sec = \":\" + sec);\n\n      const task_id = date.toLocaleDateString() + \"  \" + hrs + mins + sec;\n      const Task = {\n        content: val,\n        completed: completed_task,\n        addedTime: task_id,\n      };\n\n      localStorage.setItem(task_id, JSON.stringify(Task));\n\n      refreshList();\n\n      document.getElementById(\"text-in\").value = \"\";\n    }\n  };\n\n  const deleteAllTask = () => {\n    localStorage.clear();\n    refreshList();\n  };\n\n  return (\n    <>\n      <Container>\n        <h2>Write Task here : </h2>\n        <textarea id=\"text-in\" cols={40} rows={5}></textarea>\n        <button onClick={addTask} id=\"add-btn\">\n          Add Task\n        </button>\n        <button onClick={deleteAllTask} id=\"delAll-btn\">\n          Delete All Task\n        </button>\n      </Container>\n    </>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 1rem;\n  #text-in {\n    border-radius: 0.7rem;\n    font-size: 1.2rem;\n    border: 3px solid black;\n    margin: 1rem;\n  }\n  #add-btn,\n  #delAll-btn {\n    width: 10rem;\n    height: 3rem;\n    background-color: cadetblue;\n    color: rgb(13, 6, 63);\n    margin: 1rem;\n    padding: 0.5rem;\n    border: none;\n    border-radius: 0.5rem;\n    font-size: 1.2rem;\n  }\n`;\n\nexport default InputTask;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}